// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	domain "github.com/eragon-mdi/calc-back/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// DeleteCalculation provides a mock function with given fields: _a0
func (_m *Repository) DeleteCalculation(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCalculation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_DeleteCalculation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCalculation'
type Repository_DeleteCalculation_Call struct {
	*mock.Call
}

// DeleteCalculation is a helper method to define mock.On call
//   - _a0 string
func (_e *Repository_Expecter) DeleteCalculation(_a0 interface{}) *Repository_DeleteCalculation_Call {
	return &Repository_DeleteCalculation_Call{Call: _e.mock.On("DeleteCalculation", _a0)}
}

func (_c *Repository_DeleteCalculation_Call) Run(run func(_a0 string)) *Repository_DeleteCalculation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Repository_DeleteCalculation_Call) Return(_a0 error) *Repository_DeleteCalculation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_DeleteCalculation_Call) RunAndReturn(run func(string) error) *Repository_DeleteCalculation_Call {
	_c.Call.Return(run)
	return _c
}

// GetCalculation provides a mock function with given fields: _a0
func (_m *Repository) GetCalculation(_a0 string) (domain.Calculation, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetCalculation")
	}

	var r0 domain.Calculation
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.Calculation, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) domain.Calculation); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(domain.Calculation)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetCalculation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCalculation'
type Repository_GetCalculation_Call struct {
	*mock.Call
}

// GetCalculation is a helper method to define mock.On call
//   - _a0 string
func (_e *Repository_Expecter) GetCalculation(_a0 interface{}) *Repository_GetCalculation_Call {
	return &Repository_GetCalculation_Call{Call: _e.mock.On("GetCalculation", _a0)}
}

func (_c *Repository_GetCalculation_Call) Run(run func(_a0 string)) *Repository_GetCalculation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Repository_GetCalculation_Call) Return(_a0 domain.Calculation, _a1 error) *Repository_GetCalculation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetCalculation_Call) RunAndReturn(run func(string) (domain.Calculation, error)) *Repository_GetCalculation_Call {
	_c.Call.Return(run)
	return _c
}

// GetCalculations provides a mock function with given fields: _a0
func (_m *Repository) GetCalculations(_a0 int) ([]domain.Calculation, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetCalculations")
	}

	var r0 []domain.Calculation
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]domain.Calculation, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int) []domain.Calculation); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Calculation)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetCalculations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCalculations'
type Repository_GetCalculations_Call struct {
	*mock.Call
}

// GetCalculations is a helper method to define mock.On call
//   - _a0 int
func (_e *Repository_Expecter) GetCalculations(_a0 interface{}) *Repository_GetCalculations_Call {
	return &Repository_GetCalculations_Call{Call: _e.mock.On("GetCalculations", _a0)}
}

func (_c *Repository_GetCalculations_Call) Run(run func(_a0 int)) *Repository_GetCalculations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *Repository_GetCalculations_Call) Return(_a0 []domain.Calculation, _a1 error) *Repository_GetCalculations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetCalculations_Call) RunAndReturn(run func(int) ([]domain.Calculation, error)) *Repository_GetCalculations_Call {
	_c.Call.Return(run)
	return _c
}

// SaveTask provides a mock function with given fields: _a0
func (_m *Repository) SaveTask(_a0 domain.Calculation) (domain.Calculation, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SaveTask")
	}

	var r0 domain.Calculation
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Calculation) (domain.Calculation, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(domain.Calculation) domain.Calculation); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(domain.Calculation)
	}

	if rf, ok := ret.Get(1).(func(domain.Calculation) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_SaveTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveTask'
type Repository_SaveTask_Call struct {
	*mock.Call
}

// SaveTask is a helper method to define mock.On call
//   - _a0 domain.Calculation
func (_e *Repository_Expecter) SaveTask(_a0 interface{}) *Repository_SaveTask_Call {
	return &Repository_SaveTask_Call{Call: _e.mock.On("SaveTask", _a0)}
}

func (_c *Repository_SaveTask_Call) Run(run func(_a0 domain.Calculation)) *Repository_SaveTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.Calculation))
	})
	return _c
}

func (_c *Repository_SaveTask_Call) Return(_a0 domain.Calculation, _a1 error) *Repository_SaveTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_SaveTask_Call) RunAndReturn(run func(domain.Calculation) (domain.Calculation, error)) *Repository_SaveTask_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTaskInfo provides a mock function with given fields: _a0
func (_m *Repository) UpdateTaskInfo(_a0 domain.Calculation) (domain.Calculation, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTaskInfo")
	}

	var r0 domain.Calculation
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Calculation) (domain.Calculation, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(domain.Calculation) domain.Calculation); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(domain.Calculation)
	}

	if rf, ok := ret.Get(1).(func(domain.Calculation) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_UpdateTaskInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTaskInfo'
type Repository_UpdateTaskInfo_Call struct {
	*mock.Call
}

// UpdateTaskInfo is a helper method to define mock.On call
//   - _a0 domain.Calculation
func (_e *Repository_Expecter) UpdateTaskInfo(_a0 interface{}) *Repository_UpdateTaskInfo_Call {
	return &Repository_UpdateTaskInfo_Call{Call: _e.mock.On("UpdateTaskInfo", _a0)}
}

func (_c *Repository_UpdateTaskInfo_Call) Run(run func(_a0 domain.Calculation)) *Repository_UpdateTaskInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.Calculation))
	})
	return _c
}

func (_c *Repository_UpdateTaskInfo_Call) Return(_a0 domain.Calculation, _a1 error) *Repository_UpdateTaskInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_UpdateTaskInfo_Call) RunAndReturn(run func(domain.Calculation) (domain.Calculation, error)) *Repository_UpdateTaskInfo_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
