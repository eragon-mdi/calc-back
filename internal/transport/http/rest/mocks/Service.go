// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	domain "github.com/eragon-mdi/calc-back/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// CreateCalculation provides a mock function with given fields: _a0
func (_m *Service) CreateCalculation(_a0 domain.CalcExpr) (domain.Calculation, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateCalculation")
	}

	var r0 domain.Calculation
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.CalcExpr) (domain.Calculation, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(domain.CalcExpr) domain.Calculation); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(domain.Calculation)
	}

	if rf, ok := ret.Get(1).(func(domain.CalcExpr) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_CreateCalculation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCalculation'
type Service_CreateCalculation_Call struct {
	*mock.Call
}

// CreateCalculation is a helper method to define mock.On call
//   - _a0 domain.CalcExpr
func (_e *Service_Expecter) CreateCalculation(_a0 interface{}) *Service_CreateCalculation_Call {
	return &Service_CreateCalculation_Call{Call: _e.mock.On("CreateCalculation", _a0)}
}

func (_c *Service_CreateCalculation_Call) Run(run func(_a0 domain.CalcExpr)) *Service_CreateCalculation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.CalcExpr))
	})
	return _c
}

func (_c *Service_CreateCalculation_Call) Return(_a0 domain.Calculation, _a1 error) *Service_CreateCalculation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_CreateCalculation_Call) RunAndReturn(run func(domain.CalcExpr) (domain.Calculation, error)) *Service_CreateCalculation_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCalcById provides a mock function with given fields: _a0
func (_m *Service) DeleteCalcById(_a0 domain.CalcID) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCalcById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.CalcID) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_DeleteCalcById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCalcById'
type Service_DeleteCalcById_Call struct {
	*mock.Call
}

// DeleteCalcById is a helper method to define mock.On call
//   - _a0 domain.CalcID
func (_e *Service_Expecter) DeleteCalcById(_a0 interface{}) *Service_DeleteCalcById_Call {
	return &Service_DeleteCalcById_Call{Call: _e.mock.On("DeleteCalcById", _a0)}
}

func (_c *Service_DeleteCalcById_Call) Run(run func(_a0 domain.CalcID)) *Service_DeleteCalcById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.CalcID))
	})
	return _c
}

func (_c *Service_DeleteCalcById_Call) Return(_a0 error) *Service_DeleteCalcById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_DeleteCalcById_Call) RunAndReturn(run func(domain.CalcID) error) *Service_DeleteCalcById_Call {
	_c.Call.Return(run)
	return _c
}

// GetCalculationById provides a mock function with given fields: _a0
func (_m *Service) GetCalculationById(_a0 domain.CalcID) (domain.Calculation, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetCalculationById")
	}

	var r0 domain.Calculation
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.CalcID) (domain.Calculation, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(domain.CalcID) domain.Calculation); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(domain.Calculation)
	}

	if rf, ok := ret.Get(1).(func(domain.CalcID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetCalculationById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCalculationById'
type Service_GetCalculationById_Call struct {
	*mock.Call
}

// GetCalculationById is a helper method to define mock.On call
//   - _a0 domain.CalcID
func (_e *Service_Expecter) GetCalculationById(_a0 interface{}) *Service_GetCalculationById_Call {
	return &Service_GetCalculationById_Call{Call: _e.mock.On("GetCalculationById", _a0)}
}

func (_c *Service_GetCalculationById_Call) Run(run func(_a0 domain.CalcID)) *Service_GetCalculationById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.CalcID))
	})
	return _c
}

func (_c *Service_GetCalculationById_Call) Return(_a0 domain.Calculation, _a1 error) *Service_GetCalculationById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetCalculationById_Call) RunAndReturn(run func(domain.CalcID) (domain.Calculation, error)) *Service_GetCalculationById_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastCalculations provides a mock function with no fields
func (_m *Service) GetLastCalculations() ([]domain.Calculation, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLastCalculations")
	}

	var r0 []domain.Calculation
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.Calculation, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Calculation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Calculation)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetLastCalculations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastCalculations'
type Service_GetLastCalculations_Call struct {
	*mock.Call
}

// GetLastCalculations is a helper method to define mock.On call
func (_e *Service_Expecter) GetLastCalculations() *Service_GetLastCalculations_Call {
	return &Service_GetLastCalculations_Call{Call: _e.mock.On("GetLastCalculations")}
}

func (_c *Service_GetLastCalculations_Call) Run(run func()) *Service_GetLastCalculations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Service_GetLastCalculations_Call) Return(_a0 []domain.Calculation, _a1 error) *Service_GetLastCalculations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetLastCalculations_Call) RunAndReturn(run func() ([]domain.Calculation, error)) *Service_GetLastCalculations_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCalculationById provides a mock function with given fields: _a0
func (_m *Service) UpdateCalculationById(_a0 domain.Calculation) (domain.Calculation, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCalculationById")
	}

	var r0 domain.Calculation
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Calculation) (domain.Calculation, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(domain.Calculation) domain.Calculation); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(domain.Calculation)
	}

	if rf, ok := ret.Get(1).(func(domain.Calculation) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_UpdateCalculationById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCalculationById'
type Service_UpdateCalculationById_Call struct {
	*mock.Call
}

// UpdateCalculationById is a helper method to define mock.On call
//   - _a0 domain.Calculation
func (_e *Service_Expecter) UpdateCalculationById(_a0 interface{}) *Service_UpdateCalculationById_Call {
	return &Service_UpdateCalculationById_Call{Call: _e.mock.On("UpdateCalculationById", _a0)}
}

func (_c *Service_UpdateCalculationById_Call) Run(run func(_a0 domain.Calculation)) *Service_UpdateCalculationById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.Calculation))
	})
	return _c
}

func (_c *Service_UpdateCalculationById_Call) Return(_a0 domain.Calculation, _a1 error) *Service_UpdateCalculationById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_UpdateCalculationById_Call) RunAndReturn(run func(domain.Calculation) (domain.Calculation, error)) *Service_UpdateCalculationById_Call {
	_c.Call.Return(run)
	return _c
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
